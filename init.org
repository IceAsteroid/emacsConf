#+title:Emacs Init File in Org-mode
#+property: header-args :tangle init.el
#+auto_tangle: t

Font test: 1 2 3 4 5 6 7
  2 3 4 5 6 7 ;indentation test
#+begin_src emacs-lisp :tangle off
 2 3 4 5 6 7
#+end_src

Test visual auto-fill
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss

* Proxy
#+begin_src emacs-lisp :tangle yes
  ;; Proxy settings
  (setq url-proxy-services '(("no_proxy" . "127.0.0.1")
			     ("http" . "127.0.0.1:8118")
			     ("https" . "127.0.0.1:8118")))
#+end_src

* straight.el: A replacement to package.el, Not in use, replaced by elpaca
#+begin_src emacs-lisp :tangle off
   ;; straight.el setup
   ;;;; Prevent package.el to load packages prior to their
   ;;;; -init-file loading at startup in favor of straight.el
   (setq package-enable-at-startup nil)
   ;;;; Bootstrap straight
   (defvar bootstrap-version)
   (let ((bootstrap-file
  (expand-file-name
	   "straight/repos/straight.el/bootstrap.el"
	   (or (bound-and-true-p straight-base-dir)
	       user-emacs-directory)))
	 (bootstrap-version 7))
     (unless (file-exists-p bootstrap-file)
       (with-current-buffer
	   (url-retrieve-synchronously
	    "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	    'silent 'inhibit-cookies)
	 (goto-char (point-max))
	 (eval-print-last-sexp)))
     (load bootstrap-file nil 'nomessage))
   ;;;; Install packages by straight.el
   ;;;;(straight-use-package 'el-patch)			
#+end_src

* elpaca.el: A better replcaement to straight.el from package.el
#+begin_src emacs-lisp
  ;; elpaca.el setup
  ;;; Boostrap elpaca
  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
  ;;;; elpace integration with use-package
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))
  ;;;;;; Necessary to use the `:elpaca' use-package keyword at the top-level.
  (elpaca-wait)

  ;;;; Prevent package.el to load packages prior to their
  ;;;;-init-file loading at startup in favor of elpaca.el
  (setq package-enable-at-startup nil)
#+end_src

* god.el: Get into God modal mode
#+begin_src emacs-lisp
  (use-package god-mode
    :ensure t
    :init
    ;; Add following two lines to avoid
    ;;-to no enable for some types of buffers
    (setq god-exempt-major-modes nil)
    (setq god-exempt-predicates nil)
    ;; Prevent translating F1 to F12 to be C-<f1> to C-<f12>
    (setq god-mode-enable-function-key-translation nil)
    ;;(god-mode-all)
    :config
    :bind
    ("<escape>" . god-mode-all))
#+end_src

* doom-themes
+ Acceptable themes of doom to use in daytime
  - doom-acario-light
  - doom-solarized-light
  - doom-bluloco-dark
+ Acceptable themes of doom to use in nighttime
  - doom-oksolar-dark
  - doom-solarized-dark-high-contrast
  - doom-solarized-dark

#+begin_src emacs-lisp :tangle yes
  ;; Doom-themes related configs
  (use-package doom-themes
    :init
    ;;(load-theme 'doom-gruvbox t)
    (load-theme 'doom-oksolar-dark t)
    )
  ;;(load-theme 'tango-dark t)
#+end_src

Define single command to switch a specific theme
#+begin_src emacs-lisp :tangle yes
  (defun theme-switch-doom-oksolar-dark ()
    (interactive)
    (load-theme 'doom-oksolar-dark t))
  (defun theme-switch-doom-acario-light ()
    (interactive)
    (load-theme 'doom-acario-light t))
  (global-set-key (kbd "C-x <f1>") 'theme-switch-doom-oksolar-dark)
  (global-set-key (kbd "C-x <f2>") 'theme-switch-doom-acario-light)
#+end_src

* doom-modeline
*Note:* In order for icons to display correctly, the command "nerd-icons-install-fonts" needs to be executed to install needed icon fonts. Otherwise, icons are either missing or too small or emaciated

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-icon t)
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-buffer-state-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-unicode-fallback nil)
    (setq doom-modeline-buffer-name t)
    (setq doom-modeline-highlight-modified-buffer-name t)
    ;; When non-nil, mode line displays column numbers zero-based.
    ;; See `column-number-indicator-zero-based'.
    (setq doom-modeline-column-zero-based t))
#+end_src

* command-log-mode.el: Print executed commands in real-time
#+begin_src emacs-lisp
  ;; command-log-mode.el: Print executed commands in real-time
  (use-package command-log-mode
    :ensure t)
#+end_src

* transpose-frame.el: Switching opened windows to be horizontal/vertical
#+begin_src emacs-lisp
  (use-package transpose-frame
    :ensure t
    :bind ("C-x =" . transpose-frame)) ;;override (what-cursor-position)
#+end_src

* centered-cursor-mode.el: Keep current line at center
#+begin_src emacs-lisp
  (use-package centered-cursor-mode
    :demand
    :config
    ;; Optional, enables centered-cursor-mode in all buffers.
    ;;(global-centered-cursor-mode)

    ;; disable in terminal modes
    ;; http://stackoverflow.com/a/6849467/519736
    ;; also disable in Info mode, because it breaks going back with the backspace key
    (define-global-minor-mode my-global-centered-cursor-mode centered-cursor-mode
      (lambda ()
	(when (not (memq major-mode
			 (list 'Info-mode 'term-mode 'eshell-mode 'shell-mode 'erc-mode)))
	  (centered-cursor-mode))))
    (my-global-centered-cursor-mode 1))
#+end_src

* linum-relative.el: Not in use, unmaintained
*Note*: Do not use this pacakge, it's been unmaintained, and the dependent pacakge "linum" had been removed from the built-in library

#+begin_src emacs-lisp :tangle off
  ;; linum-relative.el: Display line numbers
  ;;-better than built-in display-line-numbers-mode
  (use-package linum-relative
    :init
    (global-linum-mode 1))
#+end_src

* perfect-margin.el: Auto-adjust margin to keep content in center; Not in use, buggy
#+begin_src emacs-lisp :tangle off
  ;; perfect-margin.el
  (use-package perfect-margin
    :ensure t
    :init
    (defcustom perfect-margin-ignore-regexps
      '("^minibuf" "^[[:space:]]*\\*")
      ;;'("^minibuf" "^[[:space:]]*\\*" "*Treemacs*")
      "List of strings to determine if window is ignored.
       Each string is used as regular expression to match the window buffer name."
      :group 'perfect-margin)
    (defcustom perfect-margin-ignore-filters
      '(window-minibuffer-p)
      "List of functions to determine if window is ignored.
       Each function is called with window as its sole arguemnt,
       returning a non-nil value indicate to ignore the window."
      :group 'perfect-margin)
    :custom
    (perfect-margin-visible-width 128)
    :config
    ;; enable perfect-mode
    (perfect-margin-mode t)
    ;; auto-center minibuffer windows
    (setq perfect-margin-ignore-filters nil)
    ;; auto-center special windows
    (setq perfect-margin-ignore-regexps nil)
    ;; add additinal bding on margin area
    (dolist (margin '("<left-margin> " "<right-margin> "))
      (global-set-key (kbd (concat margin "<mouse-1>")) 'ignore)
      (global-set-key (kbd (concat margin "<mouse-3>")) 'ignore)
      (dolist (multiple '("" "double-" "triple-"))
	(global-set-key (kbd (concat margin "<" multiple "wheel-up>")) 'mwheel-scroll)
	(global-set-key (kbd (concat margin "<" multiple "wheel-down>")) 'mwheel-scroll))))
#+end_src

* all-the-icons.el
#+begin_src emacs-lisp
  ;; all-the-icons.el
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
#+end_src

* treemacs.el: Multi-purpose sidebar
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :hook
    (treemacs-mode . (lambda () (display-line-numbers-mode -1)))
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay        0.5
	    treemacs-directory-name-transformer      #'identity
	    treemacs-display-in-side-window          t
	    treemacs-eldoc-display                   'simple
	    treemacs-file-event-delay                2000
	    treemacs-file-extension-regex            treemacs-last-period-regex-value
	    treemacs-file-follow-delay               0.2
	    treemacs-file-name-transformer           #'identity
	    treemacs-follow-after-init               t
	    treemacs-expand-after-init               t
	    treemacs-find-workspace-method           'find-for-file-or-pick-first
	    treemacs-git-command-pipe                ""
	    treemacs-goto-tag-strategy               'refetch-index
	    treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	    treemacs-hide-dot-git-directory          t
	    treemacs-indentation                     2
	    treemacs-indentation-string              " "
	    treemacs-is-never-other-window           nil
	    treemacs-max-git-entries                 5000
	    treemacs-missing-project-action          'ask
	    treemacs-move-forward-on-expand          nil
	    treemacs-no-png-images                   nil
	    treemacs-no-delete-other-windows         t
	    treemacs-project-follow-cleanup          nil
	    treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                        'left
	    treemacs-read-string-input               'from-child-frame
	    treemacs-recenter-distance               0.1
	    treemacs-recenter-after-file-follow      nil
	    treemacs-recenter-after-tag-follow       nil
	    treemacs-recenter-after-project-jump     'always
	    treemacs-recenter-after-project-expand   'on-distance
	    treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	    treemacs-project-follow-into-home        nil
	    treemacs-show-cursor                     nil
	    treemacs-show-hidden-files               t
	    treemacs-silent-filewatch                nil
	    treemacs-silent-refresh                  nil
	    treemacs-sorting                         'alphabetic-asc
	    treemacs-select-when-already-in-treemacs 'move-back
	    treemacs-space-between-root-nodes        t
	    treemacs-tag-follow-cleanup              t
	    treemacs-tag-follow-delay                1.5
	    treemacs-text-scale                      nil
	    treemacs-user-mode-line-format           nil
	    treemacs-user-header-line-format         nil
	    treemacs-wide-toggle-width               70
	    treemacs-width                           35
	    treemacs-width-increment                 1
	    treemacs-width-is-initially-locked       t
	    treemacs-workspace-switch-cleanup        nil)
      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)
      ;;(treemacs-follow-mode t)
      (treemacs-tag-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
	(treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple)))
      (treemacs-hide-gitignored-files-mode nil))
    ;; Self-added tweaks
    (treemacs-indent-guide-mode t) ;;enable indent indicator
    (treemacs-load-all-the-icons-with-workaround-font "Hermit")
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t d"   . treemacs-select-directory)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))
  ;;;(use-package treemacs-evil
  ;;;  :after (treemacs evil)
  ;;;  :ensure t)
  ;;;(use-package treemacs-projectile
  ;;;  :after (treemacs projectile)
  ;;;  :ensure t)
  (use-package treemacs-all-the-icons
    :ensure t)
  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)
      ;;;(use-package treemacs-magit
      ;;;  :after (treemacs magit)
      ;;;  :ensure t)
      ;;;(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
      ;;;  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
      ;;;  :ensure t
      ;;;  :config (treemacs-set-scope-type 'Perspectives))
      ;;;(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
      ;;;  :after (treemacs)
      ;;;  :ensure t
      ;;;  :config (treemacs-set-scope-type 'Tabs))

#+end_src

* vertico.el: A better completion minibuffer
#+begin_src emacs-lisp
  ;; Install & enable vertico
  (use-package vertico
    :init
    (vertico-mode)
    ;; Different scroll margin
    ;;;;(setq vertico-scroll-margin 0)
    ;; Show more candidates
    (setq vertico-count 25)
    ;; Grow and shrink the Vertico minibuffer
    ;;(setq vertico-resize t)
    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)
    )
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (setq history-length 25)
  (savehist-mode)
#+end_src

* orderless.el: Advanced search scheme
#+begin_src emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

* marginalia.el: Rich annotations for minibuffer candidates
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
		("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

* embark.el: Provides actions on targets in minibuffers/buffers
#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))
#+end_src
* corfu.el: In buffer popup for text/code completion
#+begin_src emacs-lisp
  ;; Install & Configure corfu.el,
  ;;-An in buffer popup for text/code completion
  (use-package corfu
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-preselect 'prompt)         ;; Always preselect the prompt
    ;; (corfu-auto t)                 ;; Enable auto completion
    (corfu-cycle t)           ;; Enable for Tab to scroll
    (corfu-preselect 'prompt) ;; Enable for Tab to scroll
    (corfu-auto t
		corfu-quit-no-match 'separator) ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enbale Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :bind
    ;; Use TAB for cycling, default is `corfu-complete'.
    (:map corfu-map
	  ("TAB" . corfu-next)
	  ([tab] . corfu-next)
	  ("S-TAB" . corfu-previous)
	  ([backtab] . corfu-previous))
    :init
    :config
    (global-corfu-mode)
    (corfu-history-mode))
#+end_src

** Tweak built-in completion Dabbrev.el to be used with corful
#+begin_src emacs-lisp
  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    :elpaca nil  ;;Turn off elpaca, since dabbrev is built-in
    :bind
    ;; Swap M-/ and C-M-/
    (("C-<tab>" . dabbrev-completion)
     ;;("M-/" . dabbrev-expand)
     )
    :custom
    (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

** Eshell & Shell tweaks with use of corfu
#+begin_src emacs-lisp
  ;; Eshell & Shell tweaks with use of corfu
  ;;; Disable auto-completion-popup in eshell or shell
  (add-hook 'eshell-mode-hook
	    (lambda ()
	      (setq-local corfu-auto nil)
	      (corfu-mode)))
  ;;; Auto-commit the command after hitting RET for the completion popup
  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
      (comint-send-input))))
  (advice-add #'corfu-insert :after #'corfu-send-shell)
#+end_src

* Testing section
** Mixed variable & fixed Fonts in Org-mode
#+begin_src emacs-lisp :tangle yes
  (setq default-frame-alist nil)
  (setq display-line-numbers-widen nil)
  (setq-default line-spacing 0.05)
  (defun addtextproperties ()
    (interactive)
    (add-text-properties (point-min) (point-max)
			'(line-spacing -0.3)))
  ;;(set-frame-font "Dosis-v2031b-13" nil t)
  ;;(set-face-font 'fixed-pitch-serif "JetBrainsMono Nerd Font")
  ;;(set-face-font 'variable-pitch "Liberation Sans")
  ;;(set-face-attribute 'default nil :height 200)
  ;;(set-face-attribute 'line-number nil :family "JetBrainsMono Nerd Font")

  ;; section that it works
  ;;;(set-face-attribute 'default nil :font "JetBrainsMono Nerd Font-14")
  ;;;(set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font-12")
  ;;;(set-face-attribute 'variable-pitch nil :font "Dosis-v2031b-14")
  ;;;(set-face-attribute 'line-number nil :font "JetBrainsMono Nerd Font-14") ;not works
  ;;;(add-hook 'org-mode-hook 'variable-pitch-mode)

  ;; convert worked section from using (set-face-attribute) to
  ;;-(custom-theme-set-faces), since faces set by (set-face-attribute)
  ;;-sometimes got overriden by other inner changes of Emacs, such as activated pacakges.
  (custom-theme-set-faces
    'user
      ;;'(default ((t (:font "Dosis-v2031b-13"))))
      '(default ((t (:font "JetBrainsMono Nerd Font-12"))))
      '(line-number ((t (:family "JetBrainsMono Nerd Font" :height 0.8 :slant normal))))
      '(line-number-current-line ((t (:family "JetBrainsMono Nerd Font" :height 0.8 :slant normal))))
      '(fixed-pitch ((t (:font "JetBrainsMono Nerd Font-11"))))
      ;;'(variable-pitch ((t (:font "Dosis-v2031b-13"))))
      ;;'(variable-pitch ((t (:font "Linux Libertine G-15"))))
      '(variable-pitch ((t (:font "Dosis-v2031b-14"))))
      ;;'(org-document-title ((t (:inherit outline-1 :height 2.0 :underline t :family "Linux Libertine Display G"))))
      '(org-document-title ((t (:height 2.0 :underline t :family "Linux Libertine Display G"))))
      ;;(org-level-1 ((t (:inherit outline-1 :height 1.0 :family "Linux Libertine G"))))
      ;;(org-level-2 ((t (:inherit outline-2 :height 1.0 :family "Linux Libertine G"))))
      ;;(org-level-3 ((t (:inherit outline-3 :height 1.0 :family "Linux Libertine G"))))
      ;;(org-level-4 ((t (:inherit outline-4 :height 1.0 :family "Linux Libertine G"))))
      ;;(org-level-5 ((t (:inherit outline-5 :height 1.0 :family "Linux Libertine G"))))
      ;;(org-level-6 ((t (:inherit outline-6 :height 1.0 :family "Linux Libertine G"))))
      ;;(org-level-7 ((t (:inherit outline-7 :height 1.0 :family "Linux Libertine G"))))
      ;;(org-level-8 ((t (:inherit outline-8 :height 1.0 :family "Linux Libertine G"))))
  )
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  ;;(add-hook 'minibuffer-mode-hook (lambda () (set-frame-font "Dosis-v2031b-13" nil t)))

  ;;;       (custom-theme-set-faces
  ;;;     'user
  ;;;      '(variable-pitch ((t (:family "Noto Serif" :height 180 :weight normal))))
  ;;;      '(fixed-pitch ((t ( :family "JetBrainsMono Nerd Font" :height 120)))))

  ;;;(custom-theme-set-faces
  ;;;'user
  (custom-set-faces
  '(org-block ((t (:inherit fixed-pitch))))
  '(org-code ((t (:inherit (shadow fixed-pitch)))))
  ;;'(org-document-info ((t (:foreground "dark orange"))))
  '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
  '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
  ;;'(org-link ((t (:foreground "royal blue" :underline t))))
  '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
  '(org-property-value ((t (:inherit fixed-pitch))) t)
  '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
  ;;'(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
  '(org-table ((t (:inherit fixed-pitch))))
  '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
  '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src

#+begin_src emacs-lisp :tangle off
1 23 4 5 7 8 9 10
#+end_src

** Reduce line-spacing beyond limitation. Not solved
#+begin_src emacs-lisp :tangle off
;; Set the padding between lines
(defvar line-padding 0.5)
(defun add-line-padding ()
  "Add extra padding between lines"
  ; remove padding overlays if they already exist
  (let ((overlays (overlays-at (point-min))))
    (while overlays
      (let ((overlay (car overlays)))
        (if (overlay-get overlay 'is-padding-overlay)
            (delete-overlay overlay)))
      (setq overlays (cdr overlays))))
  ; add a new padding overlay
  (let ((padding-overlay (make-overlay (point-min) (point-max))))
    (overlay-put padding-overlay 'is-padding-overlay t)
    (overlay-put padding-overlay 'line-spacing (* .1 line-padding))
    (overlay-put padding-overlay 'line-height (+ 1 (* .1 line-padding))))
  (setq mark-active nil))
(add-hook 'buffer-list-update-hook 'add-line-padding)
#+end_src

* Org-mode related configs
#+begin_src emacs-lisp
  ;; Org-mode
  (use-package org
    :elpaca nil
    ;;:mode (("\\.org$" . org-mode))
    :init
    ;;(setq org-ellipsis "⬎")
    ;;(setq org-ellipsis "⮷")
    ;;(setq org-ellipsis "⤵")
    (setq org-use-speed-commands t)
    :custom-face
    ;;(org-level-1 ((t (:underline (t(:inherit 'org-level-1))))))
    :config
    (add-to-list 'org-structure-template-alist '("L" . "src latex"))
    (add-to-list 'org-structure-template-alist '("P" . "src python"))       
    (add-to-list 'org-structure-template-alist '("H" . "src haskell"))
    (add-to-list 'org-structure-template-alist '("B" . "src bash"))
    (add-to-list 'org-structure-template-alist '("I" . "src emacs-lisp"))
    ;;(add-to-list 'org-structure-template-alist '("d" . "src d2 :file ./Exports/Pics/filename.png :flags -t 4 -l elk \n"))
    ;;(add-to-list 'org-structure-template-alist '("j" . "src jupyter-python :session py \n"))
    ;;(add-to-list 'org-structure-template-alist '("P" . "src jupyter-python :session py :display plain \n"))
    ;;(set-face-underline 'outline-ellipsis t)
    )
    #+end_src

** org-label-load-languages.el: Built-in in  org
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages 'org-babel-load-languages
   '(
       (shell . t)
       (haskell . t)
       (python . t)
       (perl . t)
   ))
#+end_src

** org-auto-tangle.el
#+begin_src emacs-lisp
  ;;; auto-tangle code block to specified file on save
  (use-package org-auto-tangle
    :ensure t
    :hook
    (org-mode . org-auto-tangle-mode))
#+end_src

** org-superstar-mode.el: Change leading string of org-headings
#+begin_src emacs-lisp :tangle yes
  ;;; org-superstar-mode
  (use-package org-superstar
    :ensure t
    :hook
    (org-mode . (lambda () (org-superstar-mode 1)))
    :init
    ;; This is usually the default, but keep in mind it must be nil
    (setq org-hide-leading-stars nil)
    ;; This line is necessary.
    (setq org-superstar-leading-bullet ?\s)
    ;; If you use Org Indent you also need to add this, otherwise the
    ;; above has no effect while Indent is enabled.
    (setq org-indent-mode-turns-on-hiding-stars nil)
    ;;(setq org-superstar-leading-bullet 11044)
    (setq org-superstar-headline-bullets-list '(19968 20108 19977 22235 20116 20845 19971 20843 20061 8553 8554 8555))
    (setq org-superstar-remove-leading-stars t))
#+end_src

Testing purpses
#+begin_src emacs-lisp :tangle off
   (setq org-hide-leading-stars t)
#+end_src

** mixed-pitch.el: Preset for variable-pitch & fixed-pitch. Not well-documented. Not in use, have self-defined similar feature
#+begin_src emacs-lisp :tangle off
  (use-package mixed-pitch
  :ensure t
  :init
    :hook
    ;; If you want it in all text modes:
    (text-mode . mixed-pitch-mode)
  :config)
  ;;(set-face-attribute 'variable-pitch t :family "Droid Serif")
#+end_src

** org-variable-pitch.el: Not well-explained, can't figure out. Not in use
#+begin_src emacs-lisp
  ;;Stupid documentation worse than nothing, literaly can't make it work.
#+end_src

** org-sticky-header.el: Display current heading at top if it's off-screen, not in use
*Note*: org-sticky-header doesn't display identical leading chars with org-superstar when org identation is disabled

#+begin_src emacs-lisp :tangle off
  ;;; org-sticky-header.el: Display out-screen parent headings
  (use-package org-sticky-header
    :ensure t
    :hook (org-mode . org-sticky-header-mode))
#+end_src

** Change outline ellipsis overridng org-ellipsis
#+begin_src emacs-lisp :tangle yes
  (set-display-table-slot standard-display-table 
  			   'selective-display 
  			   (string-to-vector "⤵"))
#+end_src

** org-sidebar.el: A sidebar displaying relevant features including an org-sidebar-tree for org-mode
#+begin_src emacs-lisp :tangle yes
  (use-package org-sidebar
    :ensure t
    :init
    (setq outline-minor-mode-cycle t)
  )
#+end_src

** org-side-tree: A sidebar specific to display/navigate org-headings
#+begin_src emacs-lisp :tangle yes
  (use-package org-side-tree
    :ensure t
    :init
    ;;(setq org-hide-leading-stars t)
    ;;(add-hook 'org-side-tree-mode-hook (lambda () (setq-local org-hide-leading-stars t)))
    (setq outline-minor-mode-cycle t)
    ;;(setq org-side-tree-enable-folding t)
    ;;(setq org-side-tree-fontify t)
    ;;(setq org-side-tree-persistent nil)
    ;;(setq org-hide-leading-stars t)
    ;;(setq truncate-lines t)
    ;;(setq truncate-partial-width-windows t)
    ;;(setq org-hide-leading-stars t)
    (add-hook 'org-side-tree-mode-hook (lambda () (visual-line-mode -1)))
    ;;(add-hook 'org-side-tree-mode-hook (lambda () (setq org-hide-leading-stars nil)))
    ;;(add-hook 'org-side-tree-mode-hook (lambda () (outline-mode -1)))
    (add-hook 'org-side-tree-mode-hook (lambda () (display-line-numbers-mode -1)))
    ;;(add-hook 'org-side-tree-mode-hook 'org-mode)
    :config
  )
    ;;(defadvice org-side-tree (before run-org-side-tree activate)
    ;;  "Run `before-org-side-tree-hook'."
    ;;  (run-hooks 'before-org-side-tree-hook))
    ;;(defadvice org-side-tree (after run-org-side-tree activate)
    ;;  "Run `after-org-side-tree-hook'."
    ;;  (run-hooks 'before-org-side-tree-hook))
    ;;(add-hook 'after-org-side-tree-hook (lambda () (setq-local org-hide-leading-stars t)))
    ;;;;(add-hook 'after-org-side-tree-hook (lambda () (org-indent-mode -1)))
    ;;(add-hook 'after-org-side-tree-hook (lambda () (setq-local truncate-lines t)
    ;;						    (setq-local  truncate-partial-width-windows t)
    ;;						    (toggle-truncate-lines 1)))
    ;;(add-hook 'org-side-tree-mode-hook (lambda () (setq-local org-hide-leading-stars t)))
    ;;(add-hook 'org-side-tree-mode-hook (lambda () (toggle-truncate-lines 1)))
    ;;(add-hook 'org-side-tree-mode-hook 'toggle-truncate-lines)
    ;;(add-hook 'org-side-tree-mode-hook
    ;;	  (lambda ()
    ;;	    (setq truncate-lines t)
    ;;	    (setq truncate-partial-width-windows t)))
#+end_src

** Heading demo 2
*** Heading demo 3
**** Heading demo 4
***** Heading demo 5
****** Heading demo 6
******* Heading demo 7
******** Heading demo 8
********* Heading demo 9
********** Heading demo 10
*********** Heading demo 11
************ Heading demo 12

* Emacs misc
#+begin_src emacs-lisp
   ;; Emacs config misc
   (use-package emacs
     :elpaca nil
     :after (elpaca)
     :init
     ;;(setq scroll-margin 2)
     ;;set a tab as to insert 4 spaces
     (setq tab-stop-list (number-sequence 2 200 2))
     ;;set to display a literal tab char as 4 spaces
     (setq tab-width 2)
     (setq mouse-wheel-progressive-speed nil)
     (setq-default cursor-type '(bar . 5))
     (setq-default cursor-in-non-selected-windows 'hollow)
     (setq inhibit-startup-screen t)
     (setq display-line-numbers-type 'relative)
     ;;; Enable case-insensitivity for completion such as
     ;;;-Such as (find-file), (execute-extended-command)
     (setq read-file-name-completion-ignore-case t
	   read-buffer-completion-ignore-case t
	   completion-ignore-case t)
     ;;; Enable case-insensitive completion specifically
     ;;;-for Eshell even after case-insensitive completion
     ;;;-is enabled, otherwise, case-insensitive only works
     ;;;-for files not directories
     (setq eshell-glob-case-insensitive t)
     (setq eshell-cmpl-ignore-case t)
     :config
     ;; Remember and restore the last cursor location of opened files
     (save-place-mode 1)
     ;; Remember recent opened files for recentf-open-files command
     (recentf-mode 1)
     (blink-cursor-mode 0)
     (tool-bar-mode -1)
     (global-display-line-numbers-mode 1)
     ;;; Enable visual auto-fill globally, no acutal changes to files
     (global-visual-line-mode 1)
     (global-auto-revert-mode 1)
     (global-unset-key (kbd "C-z"))

  )
#+end_src

Copy-paste auto-generated configs by UI
#+begin_src emacs-lisp :tangle yes
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-safe-themes
     '("b1acc21dcb556407306eccd73f90eb7d69664380483b18496d9c5ccc5968ab43" default)))
#+end_src

* Self-defined functions
The (add-hook 'buffer-list-update-hook 'change-cursor-color-by-edition) malfunctions when treemacs seletes & switches to a buffer of file.

Instead, Use (add-hook 'window-state-change-hook 'change-cursor-color-by-edition) for window switching to cursor color consistent with read-only-mode

: ;;(add-hook 'buffer-list-update-hook 'change-cursor-color-by-edition)
: (add-hook 'window-state-change-hook 'change-cursor-color-by-edition)

** Switch to  vertical/horizontal layout for existing windows
#+begin_src emacs-lisp :tangle yes
  ;; Self-defined functions
  ;;; Auto-switch to the newly opened window
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

** Toggle read-only-mode with cursor color changed
#+begin_src emacs-lisp
  ;;; Define after-load-theme-hook
  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme'.")
  (defadvice load-theme (after run-after-load-theme-hook activate)
    "Run `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))

  ;;; Toggle read-only-mode & cursor color changed
  (defvar current-cursor-color nil)
  (defun get-current-cursor-color ()
    "Return current theme's cursor color in current frame"
    (interactive)
    (face-attribute 'cursor :background nil 'custom-enabled-themes))
  (add-hook 'after-load-theme-hook (lambda ()
				     (setq current-cursor-color
					   (get-current-cursor-color))))
  (defun change-cursor-color-by-edition ()
    "Change cursor color when edition is enabled/disabled"
    (if buffer-read-only
	(set-cursor-color "#d54444")
      (set-cursor-color "#4084d3")))
  (defun toggle-edition ()
    (interactive)
    (call-interactively `read-only-mode)
    (if buffer-read-only
	(progn
	  (god-mode-all 1)
	  (save-buffer))
      (god-mode-all -1)))
  ;;(add-hook 'text-mode-hook 'read-only-mode)
  ;;(add-hook 'prog-mode-hook 'read-only-mode)
  ;; disable initial scrathch buffer massage
  ;;-otherwise, emacs halts to fnishe when run
  ;;-as a daemoon while read-mode-only is enabled
  ;;-at startup
  (setq initial-scratch-message nil)
  ;;(add-hook 'org-mode-hook 'read-only-mode)
  (add-hook 'post-command-hook 'change-cursor-color-by-edition)
  (global-set-key (kbd "C-`") 'toggle-edition)
#+end_src

** Show current heading with its parent in window's header line
#+begin_src emacs-lisp :tangle yes
  ;;; Implement to show current heading
  ;;;-in window's header line or modeline
  (defun ndk/heading-title ()
     "Get the heading title."
     (save-excursion
       (if (not (org-at-heading-p))
	 (org-previous-visible-heading 1))
       (org-element-property :title (org-element-at-point))))
  (defun ndk/org-breadcrumbs ()
     "Get the chain of headings from the top level down
      to the current heading."
     (let ((breadcrumbs (org-format-outline-path
			   (org-get-outline-path)
			   (1- (frame-width))
			   nil "->"))
	   (title (ndk/heading-title)))
       (if (string-empty-p breadcrumbs)
	   title
	 (format "%s->%s" breadcrumbs title))))
  (defun ndk/set-header-line-format()
    ;;(setq header-line-format '(:eval (ndk/org-breadcrumbs)))
    (setq header-line-format '(:eval (format "  %s" (ndk/org-breadcrumbs))))
    )
  (add-hook 'org-mode-hook 'ndk/set-header-line-format)
#+end_src

** Prevent theme overlaping when loading a theme after previous one
#+begin_src emacs-lisp :tangle yes
  (defadvice load-theme (before theme-dont-propagate activate)
   (mapc #'disable-theme custom-enabled-themes))
#+end_src

** Better navigation in org-mode
#+begin_src emacs-lisp
  (defun forward-and-preview ()
      "Go to same level next heading and show preview in dedicated buffer"
      (interactive)
      (hide-subtree)
      (org-speed-move-safe (quote outline-next-visible-heading))
      (show-children)
      (org-tree-to-indirect-buffer)
      )
  (defun back-and-preview ()
      "Go to same level previous heading and show preview in dedicated buffer"
      (interactive)
      (hide-subtree)
      (org-speed-move-safe (quote outline-previous-visible-heading))
      (show-children)
      (org-tree-to-indirect-buffer)
      )
  (defun up-back-and-preview ()
      "Go to previous level heading and show preview in dedicated buffer"
      (interactive)
      (org-speed-move-safe (quote outline-up-heading))
      (org-tree-to-indirect-buffer)
      (hide-subtree)
      )
  (defun up-forward-and-preview ()
      "Go to previous level next heading and show preview in dedicated buffer"
      (interactive)
      (org-speed-move-safe (quote outline-up-heading))
      (hide-subtree)
      (org-speed-move-safe (quote outline-next-visible-heading))
      (org-tree-to-indirect-buffer)
      )
  (defun inside-and-preview ()
      "Go to next level heading and show preview in dedicated buffer"
      (interactive)
      (org-speed-move-safe (quote outline-next-visible-heading))
      (show-children)
      (org-tree-to-indirect-buffer)
      )
  ;;(add-to-list 'org-speed-commands-user '("l" inside-and-preview))
  ;;(add-to-list 'org-speed-commands-user '("j" forward-and-preview))
  ;;(add-to-list 'org-speed-commands-user '("k" back-and-preview))
  ;;(add-to-list 'org-speed-commands-user '("J" up-forward-and-preview))
  ;;(add-to-list 'org-speed-commands-user '("K" up-back-and-preview))
  (add-to-list 'org-speed-commands '("l" inside-and-preview))
  (add-to-list 'org-speed-commands '("j" forward-and-preview))
  (add-to-list 'org-speed-commands '("k" back-and-preview))
  (add-to-list 'org-speed-commands '("J" up-forward-and-preview))
  (add-to-list 'org-speed-commands '("K" up-back-and-preview))
#+end_src
